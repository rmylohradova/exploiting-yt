import pandas as pd
from pprint import pprint
from googleapiclient.discovery import build
from typing import List, Optional
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
import psycopg2

pd.set_option('display.max_columns', 40)

load_dotenv()
yt_key = os.environ['YOUTUBE_API_KEY']
userpass = os.environ['USER']
pg_port = os.environ['port']
db_name = os.environ['db']


def top_country_videos(region_code: str, num_results: int):
    """by specifying region code and the number of results, get top viewed videos across the region
    max = 50"""
    youtube = build('youtube', 'v3', developerKey=yt_key)
    request = youtube.videos().list(
                part=['snippet', 'contentDetails', 'statistics'],
                chart='mostPopular',
                maxResults=num_results,
                regionCode=region_code,
            )
    response = request.execute()
    top_videos_df = pd.json_normalize(response['items'][0])
    for i in range(1, num_results):
        item_df = pd.json_normalize(response['items'][i])
        top_videos_df = pd.concat([top_videos_df, item_df], ignore_index=True)
    top_videos_df['region'] = region_code
    return top_videos_df


def extract_popular_videos():
    """russian-speaking countries include(official level):
    Kyrgyzstan - kg(coudn't retrieve data),
    Belarus - by,
    Russia - ru,
    Kazakhstan - kz
    Ukraine - ua,
    (not-offficially):
    Estonia - ee,
    Georgia - ge,
    Latvia - lv,
    Lithuania - lt
    Republic of Moldova - md
    """
    try:
        ukraine_df = top_country_videos('ua', 50)
        belarus_df = top_country_videos('by', 50)
        russia_df = top_country_videos('ru', 50)
        kazakhstan_df = top_country_videos('kz', 50)
        estonia_df = top_country_videos('ee', 50)
        georgia_df = top_country_videos('ge', 50)
        latvia_df = top_country_videos('lv', 50)
        lithuania_df = top_country_videos('lt', 50)
        moldova_df = top_country_videos('md', 50)
        countries_df = pd.concat([ukraine_df,
                                  belarus_df,
                                  russia_df,
                                  kazakhstan_df,
                                  estonia_df,
                                  georgia_df,
                                  latvia_df,
                                  lithuania_df,
                                  moldova_df], axis=0)
        transform(countries_df)
    except Exception as e:
        print("Data extraction error" + str(e))


def transform(df):
    df.drop(['kind', 'etag', 'snippet.thumbnails.default.url',
             'snippet.thumbnails.default.width', 'snippet.thumbnails.default.height',
             'snippet.thumbnails.medium.url', 'snippet.thumbnails.medium.width',
             'snippet.thumbnails.medium.height', 'snippet.thumbnails.high.url', 'snippet.thumbnails.high.width',
             'snippet.thumbnails.high.height', 'snippet.thumbnails.standard.url', 'snippet.thumbnails.standard.width', 'snippet.thumbnails.maxres.url', 'snippet.thumbnails.maxres.width', 'snippet.thumbnails.maxres.height',
             'snippet.liveBroadcastContent', 'snippet.localized.title', 'snippet.localized.description', 'contentDetails.dimension',
             'contentDetails.definition', 'contentDetails.caption', 'contentDetails.projection',],
              axis=1, inplace=True)
    df.columns = df.columns.map(lambda x: x.split('.')[-1])
    df.drop(['publishedAt','height', 'description', 'tags', 'duration', 'licensedContent', 'defaultLanguage', 'blocked', 'allowed'], axis=1, inplace=True)
    load_popular_videos(df, 'highest_vids')


def load_popular_videos(df_name, tbl_name):
    try:
        engine = create_engine(f'postgresql://{userpass}@localhost:{pg_port}/{db_name}')
        df_name.to_sql(tbl_name, engine, if_exists='replace')
    except Exception as e:
        print("Data loading error" + str(e))

if __name__ == '__main__':
    extract_popular_videos()

