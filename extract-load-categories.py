import pandas as pd
from pprint import pprint
from googleapiclient.discovery import build
from typing import List, Optional
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
import psycopg2

pd.set_option('display.max_columns', 40)

load_dotenv()
yt_key = os.environ['YOUTUBE_API_KEY']
userpass = os.environ['USER']
pg_port = os.environ['port']
db_name = os.environ['db']


def extract_categories():
    """By using google api client, build a service object for Google Youtube api, calling instance method to
    return list from
    videoCategories endpoint. Fetch video category name and id data into separate lists, then zip 2 lists into interator of tuples
    to make a pandas DataFrame"""
    try:
        youtube = build('youtube', 'v3', developerKey=yt_key)
        request = youtube.videoCategories().list(
            part='snippet',
            regionCode='ua',
        )
        response = request.execute()
        cat_id: List[int] = []
        cats: List[str] = []
        n_cats = len(response['items'])
        for i in range(n_cats):
            cat_id.append(int(response['items'][i]['id']))
            cats.append(response['items'][i]['snippet']['title'])
        ctgrs_df = pd.DataFrame(list(zip(cats, cat_id)), columns=['Category', 'Category_id'])
        load_categories(ctgrs_df, 'video_categories')
    except Exception as e:
        print("Data extraction error" + str(e))


def top_country_videos(region_code: str, num_results: int):
    """by specifying region code and the number of results, get top viewed videos across the region
    max = 50"""
    youtube = build('youtube', 'v3', developerKey=yt_key)
    request = youtube.videos().list(
                part=['snippet', 'contentDetails', 'statistics'],
                chart='mostPopular',
                maxResults=num_results,
                regionCode=region_code,
            )
    response = request.execute()
    top_videos_df = pd.json_normalize(response['items'][0])
    for i in range(1, num_results):
        item_df = pd.json_normalize(response['items'][i])
        top_videos_df = pd.concat([top_videos_df, item_df], ignore_index=True)
    top_videos_df['region'] = region_code
    return top_videos_df



def load_categories(df, tbl):
    """Loading categories dataframe to a postgres db"""
    try:
        engine = create_engine(f'postgresql://{userpass}@localhost:{pg_port}/{db_name}')
        df.to_sql(tbl, engine, if_exists='replace')
    except Exception as e:
        print("Data loading error" + str(e))



if __name__ == '__main__':
    extract_categories()



