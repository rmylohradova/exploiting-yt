import pandas as pd
from pprint import pprint
from googleapiclient.discovery import build
from typing import List, Optional
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
import psycopg2

pd.set_option('display.max_columns', 40)

load_dotenv()
yt_key = os.environ['YOUTUBE_API_KEY']
userpass = os.environ['USER']
pg_port = os.environ['port']
db_name = os.environ['db']


def transform_channel_info(id: str):
    try:
        youtube = build('youtube', 'v3', developerKey=yt_key)
        request = youtube.channels().list(
            part=['snippet', 'contentDetails', 'statistics'],
            id=id,
        )
        response = request.execute()
        channel_id = response['items'][0]['id']
        channel_name = response['items'][0]['snippet']['title']
        pub_at = response['items'][0]['snippet']['publishedAt']
        channel_info = pd.json_normalize(response['items'][0]['statistics'])
        channel_info['channel_name'] = channel_name
        channel_info['channel_id'] = channel_id
        channel_info['created'] = pub_at
        channel_info['created'] = pd.to_datetime(channel_info['created'])
        channel_info.columns = channel_info.columns.map(lambda x: x.lower())
        return channel_info
    except Exception as e:
        print("Data transformation error" + str(e))


def extract_channels():
    """queried top_per_region relation, extracted distinct channel ids"""
    try:
        channels_df = pd.read_csv('channelids.csv')
        channels = channels_df['channelid'].to_list()
        channel_df = transform_channel_info('UCzxsWdAqfZfak63rTC6m1XQ')
        for id in channels:
            row = transform_channel_info(id)
            channel_df = pd.concat([channel_df, row], axis=0, ignore_index=True)
        channel_df.drop(['hiddensubscribercount'], axis=1, inplace=True)
        load_channel_info(channel_df, 'channel')
    except Exception as e:
        print("Data extraction error" + str(e))


def load_channel_info(df, tbl):
    """Loading channels to postgres"""
    try:
        df.to_csv('files/channel_info.csv')
        engine = create_engine(f'postgresql://{userpass}@localhost:{pg_port}/{db_name}')
        df.to_sql(tbl, engine, if_exists='replace')
    except Exception as e:
        print("Data loading error" + str(e))


if __name__ == '__main__':
    extract_channels()


